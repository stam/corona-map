{"version":3,"sources":["components/Map/index.tsx","store/Data.ts","components/Chart/index.tsx","components/Details/index.tsx","components/Timeline/index.tsx","screens/Home.tsx","components/App.tsx","index.tsx"],"names":["position","zoom","window","innerWidth","StyledMap","styled","LMap","LEGEND","20","60","120","240","100000","findColorForValue","value","undefined","legendItem","Object","entries","find","maxValue","parseInt","Map","observer","props","store","onSelect","handleClick","event","target","feature","properties","NAME","styleFeature","useMemo","country","selectedDateWorldData","biweeklyTotalPer100k","fillColor","weight","opacity","color","fillOpacity","center","TileLayer","url","attribution","loading","GeoJSON","data","geoJson","style","onEachFeature","layer","on","click","mouseover","e","bindTooltip","openTooltip","mouseout","observable","ref","_dateTimeoutHandler","this","bootstrap","date","toISOString","split","fetchGeoJson","fetchData","selectedCountry","selectCountry","fetch","process","res","json","countryData","res2","worldData","selectedCountryData","lastDate","keys","dateCount","Date","getTime","startDate","visibleDate","dateIndex","computed","action","Chart","values","reverse","aspect","dataKey","yAxisId","domain","orientation","stroke","strokeDasharray","isAnimationActive","x","dayjs","format","type","dot","StyledTable","table","Container","div","BottomText","Details","result","cases","deaths","rel","href","Slider","input","Timeline","handleChange","useCallback","addedDays","startDateUnix","changeDate","diffInDays","min","max","onChange","toLocaleDateString","Tile","area","Background","Home","App","basename","path","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.136ed9ae.chunk.js","sourcesContent":["import React, { useMemo } from \"react\";\nimport { Map as LMap, TileLayer, GeoJSON } from \"react-leaflet\";\nimport {\n  LatLngTuple,\n  LeafletMouseEventHandlerFn,\n  StyleFunction,\n} from \"leaflet\";\nimport styled from \"styled-components\";\nimport { DataStore } from \"../../store/Data\";\nimport { observer } from \"mobx-react\";\n\nlet position: LatLngTuple = [54.83312727008725, 39.43954467773438];\nlet zoom = 4;\n\nif (window.innerWidth < 800) {\n  position = [35.20607492223198, 11.62731170654297];\n  zoom = 4;\n}\n\nconst StyledMap = styled(LMap)`\n  flex: 1;\n`;\n\ninterface Props {\n  onSelect: (country: string) => void;\n  store: DataStore;\n}\n\nconst LEGEND = {\n  20: \"#f2d776\",\n  60: \"#e2a941\",\n  120: \"#cd6b1a\",\n  240: \"#b73b12\",\n  100000: \"#7d1008\",\n};\n\nconst findColorForValue = (value: number | undefined) => {\n  if (value === undefined) {\n    return \"rgba(0, 0, 0, 0.3)\";\n  }\n  const legendItem = Object.entries(LEGEND).find(([maxValue, color]) => {\n    return value < parseInt(maxValue);\n  });\n\n  return legendItem ? legendItem[1] : \"lightskyblue\";\n};\n\nexport const Map: React.FC<Props> = observer((props) => {\n  const { store, onSelect } = props;\n  const handleClick: LeafletMouseEventHandlerFn = (event) => {\n    onSelect(event.target.feature.properties.NAME);\n  };\n\n  const styleFeature: StyleFunction<any> = useMemo(() => {\n    return (feature) => {\n      const country = feature?.properties.NAME;\n      const value = store.selectedDateWorldData[country]?.biweeklyTotalPer100k;\n\n      return {\n        fillColor: findColorForValue(value),\n        weight: 1,\n        opacity: 0.5,\n        color: \"black\",\n        fillOpacity: 0.79,\n      };\n    };\n  }, [store.selectedDateWorldData]);\n\n  return (\n    <StyledMap\n      center={position}\n      zoom={zoom}\n      // onViewportChanged={(a: any) => {\n      //   console.log(\"viewPortChanged\", a);\n      // }}\n    >\n      <TileLayer\n        url=\"https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png\"\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n      />\n      {!store.loading && (\n        <GeoJSON\n          data={store.geoJson}\n          style={styleFeature}\n          onEachFeature={(feature, layer) => {\n            const country = feature?.properties.NAME;\n            // const value = store.resultForSelectedDate[country].count;\n\n            layer.on({\n              click: handleClick,\n              mouseover: (e) => {\n                layer\n                  .bindTooltip(\n                    `<b>${country}: ${\n                      store.selectedDateWorldData[country]\n                        ?.biweeklyTotalPer100k || \"???\"\n                    } </b><br/> 14-day cumulative number of <br/>COVID-19 cases per 100 000`\n                  )\n                  .openTooltip();\n              },\n              mouseout: (e) => {},\n            });\n          }}\n        />\n      )}\n    </StyledMap>\n  );\n});\n","import { observable, action, computed } from \"mobx\";\n\nexport interface Measure {\n  Response_measure: string;\n  date_end: string;\n  date_start: string;\n}\n\ninterface DayResult {\n  biweeklyTotalPer100k: number;\n  cases: number;\n  date: string;\n  hospitalOccupancyPer100k?: number;\n  deaths: number;\n}\n\ninterface DateMap<T> {\n  [date: string]: T;\n}\ninterface CountryMap<T> {\n  [country: string]: T;\n}\n\nexport class DataStore {\n  @observable loading = true;\n  @observable visibleDate = new Date(\"2020-10-25\");\n  @observable date = new Date(\"2020-10-25\");\n  @computed get dateIndex() {\n    return this.date.toISOString().split(\"T\")[0];\n  }\n  _dateTimeoutHandler?: any;\n\n  @observable.ref worldData: DateMap<CountryMap<DayResult>> = {};\n  @observable.ref countryData: CountryMap<DateMap<DayResult>> = {};\n  @observable.ref geoJson: any;\n\n  @observable dateCount = 0;\n  @observable startDate = new Date(\"2020-01-01\");\n\n  @observable\n  selectedCountry?: string = \"Netherlands\";\n\n  constructor() {\n    this.bootstrap();\n  }\n\n  @computed get selectedCountryData() {\n    if (!this.selectedCountry) {\n      return {};\n    }\n    return this.countryData[this.selectedCountry];\n  }\n\n  @computed get selectedDateWorldData() {\n    return this.worldData[this.dateIndex];\n  }\n\n  @action async bootstrap() {\n    await this.fetchGeoJson();\n    await this.fetchData();\n\n    if (this.selectedCountry) {\n      this.selectCountry(this.selectedCountry);\n    }\n    this.loading = false;\n  }\n\n  @action private async fetchData() {\n    const res = await fetch(`${process.env.PUBLIC_URL}/countries.json`);\n    this.countryData = await res.json();\n    const res2 = await fetch(`${process.env.PUBLIC_URL}/world.json`);\n    this.worldData = await res2.json();\n  }\n\n  @action selectCountry(country: string) {\n    this.selectedCountry = country;\n    // this.dateCount = val.length;\n    // this.startDate = new Date(val[val.length - 1].date);\n\n    const selectedCountryData = this.countryData[country];\n    const lastDate = Object.keys(selectedCountryData)[0];\n\n    if (!lastDate) {\n      return;\n    }\n\n    this.dateCount =\n      (new Date(lastDate).getTime() - this.startDate.getTime()) /\n      1000 /\n      60 /\n      60 /\n      24;\n  }\n\n  @action changeDate(date: Date) {\n    this.visibleDate = date;\n    this.date = date;\n    // this.calculateResultForDate();\n    // if (this._dateTimeoutHandler) {\n    //   clearTimeout(this._dateTimeoutHandler);\n    // }\n    // this._dateTimeoutHandler = setTimeout(() => {\n\n    //   this.date = date;\n    // }, 100);\n  }\n\n  @action async fetchGeoJson() {\n    const res = await fetch(`${process.env.PUBLIC_URL}/europe.geojson`);\n    this.geoJson = await res.json();\n  }\n}\n\nexport const store = new DataStore();\n","import React, { useMemo } from \"react\";\nimport {\n  LineChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Line,\n  Tooltip,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\nimport dayjs from \"dayjs\";\n\nimport { DataStore } from \"../../store/Data\";\n\ninterface Props {\n  store: DataStore;\n}\n\ninterface Series {\n  name: string;\n  data: { x: string; y: number }[];\n}\n\ninterface ChartData {\n  options: any;\n  series: Series[];\n}\n\ninterface AnnotationProps {\n  x1: number;\n  x2: number;\n  y1: number;\n  y2: number;\n  stroke: any;\n  shape: any;\n  strokeWidth: number;\n  x: string;\n}\n\n// export const AnnotationShape: React.FC<any> = (props) => {\n//   const { x } = props;\n\n//   // Not clean to use singleton without context or props, but recharts sucks and is not extensible at all.\n//   // Can't even use context here, or use a custom component which wraps ReferenceLine...\n//   const measures = dataStore.measuresForCountry[x];\n\n//   return (\n//     <g>\n//       <line {...props} className=\"recharts-reference-line-line\" />\n//       {measures.map((m: string, i: number) => (\n//         <text key={i} x={props.x1} y={20 + 15 * i}>\n//           {m}\n//         </text>\n//       ))}\n//     </g>\n//   );\n// };\n\n// const ReferenceLine: React.FC = (props) => {\n//   return <RLine x=\"2020-04-22\" shape={AnnotationShape} />;\n// };\n\nexport const Chart: React.FC<Props> = (props) => {\n  const { store } = props;\n\n  const data = useMemo(() => {\n    return Object.values(store.selectedCountryData).reverse();\n    // return _.mapRe(store.selectedCountryData, (summary, date) => {\n\n    // })\n    // return store.selectedCountryData\n    //   .slice()\n    //   .reverse()\n    //   .map((d) => {\n    //     return {\n    //       date: d.date,\n    //       cum_14day_100k: Math.round(d.cum_14day_100k || 0),\n    //     };\n    //   });\n  }, [store.selectedCountryData]);\n\n  return (\n    <div>\n      <ResponsiveContainer aspect={16 / 7}>\n        <LineChart data={data}>\n          <XAxis dataKey=\"date\" />\n          <YAxis yAxisId=\"cases\" domain={[0, 1000]} />\n          <YAxis yAxisId=\"hospital\" domain={[0, 100]} orientation=\"right\" />\n          <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\" />\n          <Tooltip isAnimationActive={false} />\n          <ReferenceLine\n            yAxisId=\"cases\"\n            x={dayjs(store.date).format(\"YYYY-MM-DD\")}\n          />\n          {/* {Object.keys(store.measuresForCountry).map((d) => (\n            <ReferenceLine key={d} x={d} shape={AnnotationShape} />\n          ))} */}\n          <Line\n            type=\"monotone\"\n            yAxisId=\"cases\"\n            dot={false}\n            dataKey=\"biweeklyTotalPer100k\"\n            isAnimationActive={false}\n            stroke=\"#8884d8\"\n          />\n          <Line\n            type=\"monotone\"\n            yAxisId=\"hospital\"\n            dot={false}\n            dataKey=\"hospitalOccupancyPer100k\"\n            isAnimationActive={false}\n            stroke=\"hotpink\"\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport styled from \"styled-components\";\n\nimport { DataStore } from \"../../store/Data\";\nimport { Chart } from \"../Chart\";\n\nconst StyledTable = styled.table`\n  table:first-of-type td:first-of-type {\n    width: 3rem;\n    text-align: right;\n  }\n`;\n\nconst Container = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst BottomText = styled.div`\n  margin-top: auto;\n  font-size: 0.8rem;\n  color: rgba(0, 0, 0, 0.5);\n  padding-bottom: 1rem;\n`;\n\ninterface DetailsProps {\n  store: DataStore;\n}\n\nexport const Details: React.FC<DetailsProps> = observer((props) => {\n  const { store } = props;\n\n  const country = store.selectedCountry;\n  if (!country) {\n    return <Container />;\n  }\n\n  if (store.loading) {\n    return <Container>Loading...</Container>;\n  }\n\n  const result = store.selectedCountryData[store.dateIndex];\n\n  return (\n    <Container>\n      <h2>{country}</h2>\n      <Chart store={store} />\n      {result && (\n        <div>\n          <StyledTable>\n            <tbody>\n              <tr>\n                <td>{result.biweeklyTotalPer100k}</td>\n                <td>14-day total cases per 100k</td>\n              </tr>\n              <tr>\n                <td>{result.cases}</td>\n                <td>new cases</td>\n              </tr>\n              <tr>\n                <td>{result.deaths}</td>\n                <td>new deaths</td>\n              </tr>\n            </tbody>\n          </StyledTable>\n          {\n            false && false\n            // <StyledTable>\n            //   <thead>\n            //     <tr>\n            //       <td>measure</td>\n            //       <td>from</td>\n            //       <td>until</td>\n            //     </tr>\n            //   </thead>\n            //   <tbody>\n            //     {sortBy(result.measures, \"date_start\").map((measure) => (\n            //       <tr key={measure.Response_measure}>\n            //         {/* <td>{translateMeasure(measure.Response_measure)}</td> */}\n            //         <td>{measure.Response_measure}</td>\n            //         <td>{measure.date_start}</td>\n            //         <td>{measure.date_end}</td>\n            //       </tr>\n            //     ))}\n            //   </tbody>\n            // </StyledTable>\n          }\n        </div>\n      )}\n      <BottomText>\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://www.ecdc.europa.eu/en/publications-data/download-todays-data-geographic-distribution-covid-19-cases-worldwide\"\n        >\n          https://www.ecdc.europa.eu/en/publications-data/download-todays-data-geographic-distribution-covid-19-cases-worldwide\n        </a>\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://www.ecdc.europa.eu/en/publications-data/download-data-response-measures-covid-19\"\n        >\n          https://www.ecdc.europa.eu/en/publications-data/download-data-response-measures-covid-19\n        </a>\n      </BottomText>\n    </Container>\n  );\n});\n","import React, { useCallback } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { store } from \"../../store/Data\";\nimport styled from \"styled-components\";\n\nconst Slider = styled.input`\n  width: 100%;\n`;\n\nconst Container = styled.div`\n  padding-left: 3rem;\n`;\n\ninterface TimelineProps {}\n\nexport const Timeline: React.FC<TimelineProps> = observer((props) => {\n  const handleChange = useCallback((e) => {\n    const addedDays = e.target.value;\n\n    const startDateUnix = store.startDate.getTime();\n    const result = new Date(startDateUnix + addedDays * 1000 * 60 * 60 * 24);\n    store.changeDate(result);\n  }, []);\n\n  const startDate = store.startDate;\n  const date = store.visibleDate;\n\n  const diffInDays =\n    (date.getTime() - startDate.getTime()) / 1000 / 60 / 60 / 24;\n\n  return (\n    <div>\n      <h2>Timeline</h2>\n      <Container>\n        <Slider\n          type=\"range\"\n          min={0}\n          max={store.dateCount}\n          value={diffInDays}\n          onChange={handleChange}\n        />\n        <p>{store.visibleDate.toLocaleDateString()}</p>\n      </Container>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport styled from \"styled-components\";\n\nimport { Map } from \"../components/Map\";\nimport \"leaflet/dist/leaflet.css\";\nimport { store } from \"../store/Data\";\nimport { Details } from \"../components/Details\";\nimport { Timeline } from \"../components/Timeline\";\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100%;\n  display: grid;\n  background: #f9f9f9;\n  padding: 1rem;\n  grid-template-columns: 1fr 37%;\n  grid-template-areas: \"_ details\";\n  grid-gap: 1rem;\n\n  @media (max-width: 800px) {\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr 60%;\n    grid-template-areas: \"_\" \"details\";\n\n    max-width: 800px;\n  }\n`;\n\ninterface TileProps {\n  area: string;\n}\nconst Tile = styled.div<TileProps>`\n  background: white;\n  border-radius: 16px;\n  box-shadow: 0 -1px 1px 0 #e5e5e5, 0 1px 1px 0 #e5e5e5, 0 2px 2px 0 #e5e5e5,\n    0 4px 4px 0 #e5e5e5;\n\n  grid-area: ${(props) => props.area};\n  z-index: 1;\n  padding: 0 1rem;\n  display: flex;\n  flex-direction: column;\n  overflow-y: scroll;\n`;\n\nconst Background = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  z-index: 0;\n\n  > * {\n    flex: 1;\n  }\n`;\n\nexport const Home: React.FC = observer(() => {\n  return (\n    <Container>\n      <Background>\n        <Map\n          store={store}\n          onSelect={(country: string) => store.selectCountry(country)}\n        />\n      </Background>\n      <Tile area=\"details\">\n        <Timeline />\n        <Details store={store} />\n      </Tile>\n    </Container>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { Home } from \"../screens/Home\";\n\nexport const App: React.FC = observer(() => {\n  return (\n    <Router basename=\"/corona-map\">\n      <Switch>\n        <Route path=\"/\" exact>\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}