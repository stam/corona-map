{"version":3,"sources":["components/Map/index.tsx","store/Data.ts","components/Details/index.tsx","components/Timeline/index.tsx","screens/Home.tsx","components/App.tsx","index.tsx"],"names":["position","StyledMap","styled","LMap","LEGEND","20","60","120","240","100000","findColorForValue","value","legendItem","Object","entries","find","maxValue","parseInt","Map","observer","props","store","onSelect","handleClick","event","target","feature","properties","NAME","styleFeature","useMemo","country","resultForSelectedDate","count","fillColor","undefined","weight","opacity","color","fillOpacity","center","zoom","TileLayer","url","attribution","GeoJSON","data","geoJson","style","onEachFeature","layer","on","click","mouseover","e","bindTooltip","openTooltip","mouseout","normalizeWeirdInput","weirdInput","Math","round","observable","ref","_dateTimeoutHandler","this","parseGeoJson","europeGeoJson","selectedCountry","selectCountry","calculateResultForDate","distributionData","m","measuresData","error","date","visibleDate","json","countries","keys","output","type","features","forEach","f","includes","push","currentDateStr","toISOString","split","map","val","key","targetDatum","v","dateCount","length","startDate","Date","cum_14day_100k","newCases","cases","newDeaths","deaths","population","popData2019","action","StyledTable","table","Container","div","BottomText","Details","result","rel","href","Slider","input","Timeline","handleChange","useCallback","addedDays","startDateUnix","getTime","changeDate","diffInDays","min","max","onChange","toLocaleDateString","Tile","area","Background","Home","App","basename","path","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2a885985.chunk.js","sourcesContent":["import React, { useMemo } from \"react\";\nimport { Map as LMap, TileLayer, GeoJSON } from \"react-leaflet\";\nimport {\n  LatLngTuple,\n  LeafletMouseEventHandlerFn,\n  StyleFunction,\n} from \"leaflet\";\nimport styled from \"styled-components\";\nimport { DataStore } from \"../../store/Data\";\nimport { observer } from \"mobx-react\";\n\nconst position: LatLngTuple = [54.83312727008725, 39.43954467773438];\n\nconst StyledMap = styled(LMap)`\n  flex: 1;\n`;\n\ninterface Props {\n  onSelect: (country: string) => void;\n  store: DataStore;\n}\n\nconst LEGEND = {\n  20: \"#f2d776\",\n  60: \"#e2a941\",\n  120: \"#cd6b1a\",\n  240: \"#b73b12\",\n  100000: \"#7d1008\",\n};\n\nconst findColorForValue = (value: number) => {\n  const legendItem = Object.entries(LEGEND).find(([maxValue, color]) => {\n    return value < parseInt(maxValue);\n  });\n\n  return legendItem ? legendItem[1] : \"hotpink\";\n};\n\nexport const Map: React.FC<Props> = observer((props) => {\n  const { store, onSelect } = props;\n  const handleClick: LeafletMouseEventHandlerFn = (event) => {\n    onSelect(event.target.feature.properties.NAME);\n  };\n\n  const styleFeature: StyleFunction<any> = useMemo(() => {\n    return (feature) => {\n      const country = feature?.properties.NAME;\n      const value = store.resultForSelectedDate[country].count;\n\n      return {\n        fillColor: value === undefined ? \"hotpink\" : findColorForValue(value),\n        weight: 1,\n        opacity: 0.5,\n        color: \"black\",\n        fillOpacity: 0.79,\n      };\n    };\n  }, [store.resultForSelectedDate]);\n\n  return (\n    <StyledMap\n      center={position}\n      zoom={4}\n      // onViewportChanged={(a: any) => {\n      //   console.log(\"viewPortChanged\", a);\n      // }}\n    >\n      <TileLayer\n        url=\"https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png\"\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n      />\n      <GeoJSON\n        data={store.geoJson}\n        style={styleFeature}\n        onEachFeature={(feature, layer) => {\n          const country = feature?.properties.NAME;\n          // const value = store.resultForSelectedDate[country].count;\n\n          layer.on({\n            click: handleClick,\n            mouseover: (e) => {\n              layer\n                .bindTooltip(\n                  `<b>${country}: ${\n                    store.resultForSelectedDate[country].count || \"???\"\n                  } </b><br/> 14-day cumulative number of <br/>COVID-19 cases per 100 000`\n                )\n                .openTooltip();\n            },\n            mouseout: (e) => {},\n          });\n        }}\n      />\n    </StyledMap>\n  );\n});\n","import { observable, action } from \"mobx\";\nimport { map } from \"lodash\";\n\nimport distributionData from \"./distribution.json\";\nimport measuresData from \"./measures.json\";\nimport europeGeoJson from \"./europe.json\";\n\nexport interface Summary {\n  count: number | undefined;\n  newCases: number | undefined;\n  newDeaths: number | undefined;\n  population: number | undefined;\n}\n\ninterface CountrySummary {\n  [country: string]: Summary;\n}\n\nfunction normalizeWeirdInput(weirdInput: undefined | string | number) {\n  if (weirdInput === undefined) {\n    return undefined;\n  }\n  if (typeof weirdInput === \"string\") {\n    return undefined;\n  }\n  return Math.round(weirdInput);\n}\n\nexport class DataStore {\n  @observable visibleDate = new Date(\"2020-10-13\");\n  @observable date = new Date(\"2020-10-13\");\n  _dateTimeoutHandler?: any;\n\n  @observable dateCount = 0;\n  @observable startDate = new Date();\n\n  @observable measures = [];\n  @observable distribution = [];\n\n  @observable.ref geoJson: any;\n  @observable error?: string;\n\n  @observable resultForSelectedDate: CountrySummary = {};\n  @observable\n  selectedCountry?: string = \"Netherlands\";\n\n  constructor() {\n    this.parseGeoJson(europeGeoJson);\n    if (this.selectedCountry) {\n      this.selectCountry(this.selectedCountry);\n    }\n    this.calculateResultForDate();\n  }\n\n  @action selectCountry(country: string) {\n    this.selectedCountry = country;\n\n    // @ts-ignore\n    const d = distributionData[country];\n    if (!d) {\n      this.error = \"No distribution data\";\n      return;\n    }\n    // @ts-ignore\n    const m = measuresData[country];\n    if (!m) {\n      this.error = \"No countermeasure data\";\n      return;\n    }\n    this.error = undefined;\n  }\n\n  @action changeDate(date: Date) {\n    // current date\n    this.visibleDate = date;\n    this.date = date;\n    this.calculateResultForDate();\n    // if (this._dateTimeoutHandler) {\n    //   clearTimeout(this._dateTimeoutHandler);\n    // }\n    // this._dateTimeoutHandler = setTimeout(() => {\n\n    //   this.date = date;\n    // }, 100);\n  }\n\n  // Should be done in etl\n  @action parseGeoJson(json: any) {\n    const countries = Object.keys(measuresData);\n    const output: any = { type: \"FeatureCollection\", features: [] };\n\n    json.features.forEach((f: any) => {\n      if (!countries.includes(f.properties.NAME)) {\n        return;\n      }\n      output.features.push(f);\n    });\n\n    this.geoJson = output;\n  }\n\n  @action calculateResultForDate() {\n    const output: CountrySummary = {};\n    const currentDateStr = this.date.toISOString().split(\"T\")[0];\n    map(distributionData, (val, key) => {\n      const targetDatum = val.find(\n        (v) => v.date === currentDateStr || v.date < currentDateStr // sorted by date desc, so get next in line if not found for current date\n      );\n      this.dateCount = val.length;\n      this.startDate = new Date(val[val.length - 1].date);\n      output[key] = {\n        count: normalizeWeirdInput(targetDatum?.cum_14day_100k),\n        newCases: normalizeWeirdInput(targetDatum?.cases),\n        newDeaths: normalizeWeirdInput(targetDatum?.deaths),\n        population: normalizeWeirdInput(targetDatum?.popData2019),\n      };\n    });\n\n    this.resultForSelectedDate = output;\n  }\n}\n\nexport const store = new DataStore();\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport { DataStore } from \"../../store/Data\";\nimport styled from \"styled-components\";\n\nconst StyledTable = styled.table`\n  td:first-of-type {\n    width: 3rem;\n    text-align: right;\n  }\n`;\n\nconst Container = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst BottomText = styled.div`\n  margin-top: auto;\n  font-size: 0.8rem;\n  color: rgba(0, 0, 0, 0.5);\n  padding-bottom: 1rem;\n`;\n\ninterface DetailsProps {\n  store: DataStore;\n}\n\nexport const Details: React.FC<DetailsProps> = observer((props) => {\n  const { store } = props;\n\n  let result;\n  if (store.selectedCountry) {\n    result = store.resultForSelectedDate[store.selectedCountry];\n  }\n\n  return (\n    <Container>\n      <h2>{store.selectedCountry}</h2>\n      {store.error && <p>{store.error}</p>}\n      {result && (\n        <>\n          <StyledTable>\n            <tbody>\n              <tr>\n                <td>{result.count}</td>\n                <td>14-day cumulative number cases per 100k</td>\n              </tr>\n              <tr>\n                <td>{result.newCases}</td>\n                <td>new cases</td>\n              </tr>\n              <tr>\n                <td>{result.newDeaths}</td>\n                <td>new deaths</td>\n              </tr>\n            </tbody>\n          </StyledTable>\n        </>\n      )}\n      <BottomText>\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://www.ecdc.europa.eu/en/publications-data/download-todays-data-geographic-distribution-covid-19-cases-worldwide\"\n        >\n          https://www.ecdc.europa.eu/en/publications-data/download-todays-data-geographic-distribution-covid-19-cases-worldwide\n        </a>\n      </BottomText>\n    </Container>\n  );\n});\n","import React, { useCallback } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { store } from \"../../store/Data\";\nimport styled from \"styled-components\";\n\nconst Slider = styled.input`\n  width: 100%;\n`;\n\ninterface TimelineProps {}\n\nexport const Timeline: React.FC<TimelineProps> = observer((props) => {\n  const handleChange = useCallback((e) => {\n    const addedDays = e.target.value;\n\n    const startDateUnix = store.startDate.getTime();\n    const result = new Date(startDateUnix + addedDays * 1000 * 60 * 60 * 24);\n    store.changeDate(result);\n  }, []);\n\n  const startDate = store.startDate;\n  const date = store.visibleDate;\n\n  const diffInDays =\n    (date.getTime() - startDate.getTime()) / 1000 / 60 / 60 / 24;\n\n  // console.log(\"store\", diffInDays);\n  return (\n    <div>\n      <h2>Timeline</h2>\n      <Slider\n        type=\"range\"\n        min={0}\n        max={store.dateCount}\n        value={diffInDays}\n        onChange={handleChange}\n      />\n      <p>{store.visibleDate.toLocaleDateString()}</p>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport styled from \"styled-components\";\n\nimport { Map } from \"../components/Map\";\nimport \"leaflet/dist/leaflet.css\";\nimport { store } from \"../store/Data\";\nimport { Details } from \"../components/Details\";\nimport { Timeline } from \"../components/Timeline\";\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100%;\n  display: grid;\n  background: #f9f9f9;\n  padding: 1rem;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  grid-gap: 1rem;\n`;\n\ninterface TileProps {\n  area: string;\n}\nconst Tile = styled.div<TileProps>`\n  background: white;\n  border-radius: 16px;\n  box-shadow: 0 -1px 1px 0 #e5e5e5, 0 1px 1px 0 #e5e5e5, 0 2px 2px 0 #e5e5e5,\n    0 4px 4px 0 #e5e5e5;\n\n  grid-area: ${(props) => props.area};\n  z-index: 1;\n  padding: 0 1rem;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Background = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  z-index: 0;\n\n  > * {\n    flex: 1;\n  }\n`;\n\nexport const Home: React.FC = observer(() => {\n  return (\n    <Container>\n      <Background>\n        <Map\n          store={store}\n          onSelect={(country: string) => store.selectCountry(country)}\n        />\n      </Background>\n      <Tile area=\"1 / 6 / -1 / -1\">\n        <Timeline />\n        <Details store={store} />\n      </Tile>\n    </Container>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { Home } from \"../screens/Home\";\n\nexport const App: React.FC = observer(() => {\n  return (\n    <Router basename=\"/corona-map\">\n      <Switch>\n        <Route path=\"/\" exact>\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}