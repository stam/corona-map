{"version":3,"sources":["components/Map/index.tsx","store/Data.ts","components/Chart/index.tsx","components/Details/index.tsx","components/Timeline/index.tsx","screens/Home.tsx","components/App.tsx","index.tsx"],"names":["position","zoom","window","innerWidth","StyledMap","styled","LMap","LEGEND","20","60","120","240","100000","findColorForValue","value","undefined","legendItem","Object","entries","find","maxValue","parseInt","Map","observer","props","store","onSelect","handleClick","event","target","feature","properties","NAME","styleFeature","useMemo","country","resultForSelectedDate","count","fillColor","weight","opacity","color","fillOpacity","center","TileLayer","url","attribution","GeoJSON","data","geoJson","style","onEachFeature","layer","on","click","mouseover","e","bindTooltip","openTooltip","mouseout","normalizeWeirdInput","weirdInput","Math","round","observable","ref","_dateTimeoutHandler","this","parseGeoJson","europeGeoJson","selectedCountry","selectCountry","calculateResultForDate","d","distributionData","m","measuresData","error","measures","forEach","hasOwnProperty","date_start","push","date_end","measuresForCountry","casesForCountry","date","visibleDate","json","countries","keys","output","type","features","f","includes","currentDateStr","toISOString","split","map","val","key","targetDatum","v","dateCount","length","startDate","Date","filter","cum_14day_100k","newCases","cases","newDeaths","deaths","population","popData2019","action","Chart","slice","reverse","width","height","dataKey","domain","stroke","strokeDasharray","isAnimationActive","x","dayjs","format","dot","StyledTable","table","Container","div","BottomText","Details","result","rel","href","Slider","input","Timeline","handleChange","useCallback","addedDays","startDateUnix","getTime","changeDate","diffInDays","min","max","onChange","toLocaleDateString","Tile","area","Background","Home","App","basename","path","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9dac09dd.chunk.js","sourcesContent":["import React, { useMemo } from \"react\";\nimport { Map as LMap, TileLayer, GeoJSON } from \"react-leaflet\";\nimport {\n  LatLngTuple,\n  LeafletMouseEventHandlerFn,\n  StyleFunction,\n} from \"leaflet\";\nimport styled from \"styled-components\";\nimport { DataStore } from \"../../store/Data\";\nimport { observer } from \"mobx-react\";\n\nlet position: LatLngTuple = [54.83312727008725, 39.43954467773438];\nlet zoom = 4;\n\nif (window.innerWidth < 800) {\n  position = [35.20607492223198, 11.62731170654297];\n  zoom = 4;\n}\n\nconst StyledMap = styled(LMap)`\n  flex: 1;\n`;\n\ninterface Props {\n  onSelect: (country: string) => void;\n  store: DataStore;\n}\n\nconst LEGEND = {\n  20: \"#f2d776\",\n  60: \"#e2a941\",\n  120: \"#cd6b1a\",\n  240: \"#b73b12\",\n  100000: \"#7d1008\",\n};\n\nconst findColorForValue = (value: number | undefined) => {\n  if (value === undefined) {\n    return \"lightskyblue\";\n  }\n  const legendItem = Object.entries(LEGEND).find(([maxValue, color]) => {\n    return value < parseInt(maxValue);\n  });\n\n  return legendItem ? legendItem[1] : \"lightskyblue\";\n};\n\nexport const Map: React.FC<Props> = observer((props) => {\n  const { store, onSelect } = props;\n  const handleClick: LeafletMouseEventHandlerFn = (event) => {\n    onSelect(event.target.feature.properties.NAME);\n  };\n\n  const styleFeature: StyleFunction<any> = useMemo(() => {\n    return (feature) => {\n      const country = feature?.properties.NAME;\n      const value = store.resultForSelectedDate[country].count;\n\n      return {\n        fillColor: findColorForValue(value),\n        weight: 1,\n        opacity: 0.5,\n        color: \"black\",\n        fillOpacity: 0.79,\n      };\n    };\n  }, [store.resultForSelectedDate]);\n\n  return (\n    <StyledMap\n      center={position}\n      zoom={zoom}\n      // onViewportChanged={(a: any) => {\n      //   console.log(\"viewPortChanged\", a);\n      // }}\n    >\n      <TileLayer\n        url=\"https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png\"\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n      />\n      <GeoJSON\n        data={store.geoJson}\n        style={styleFeature}\n        onEachFeature={(feature, layer) => {\n          const country = feature?.properties.NAME;\n          // const value = store.resultForSelectedDate[country].count;\n\n          layer.on({\n            click: handleClick,\n            mouseover: (e) => {\n              layer\n                .bindTooltip(\n                  `<b>${country}: ${\n                    store.resultForSelectedDate[country].count || \"???\"\n                  } </b><br/> 14-day cumulative number of <br/>COVID-19 cases per 100 000`\n                )\n                .openTooltip();\n            },\n            mouseout: (e) => {},\n          });\n        }}\n      />\n    </StyledMap>\n  );\n});\n","import { observable, action } from \"mobx\";\nimport { map } from \"lodash\";\n\nimport distributionData from \"./distribution.json\";\nimport measuresData from \"./measures.json\";\nimport europeGeoJson from \"./europe.json\";\n\nexport interface Measure {\n  Response_measure: string;\n  date_end: string;\n  date_start: string;\n}\n\nexport interface Summary {\n  count: number | undefined;\n  newCases: number | undefined;\n  newDeaths: number | undefined;\n  population: number | undefined;\n  measures: Measure[];\n}\n\ninterface CountrySummary {\n  [country: string]: Summary;\n}\n\nfunction normalizeWeirdInput(weirdInput: undefined | string | number) {\n  if (weirdInput === undefined) {\n    return undefined;\n  }\n  if (typeof weirdInput === \"string\") {\n    return undefined;\n  }\n  return Math.round(weirdInput);\n}\n\nexport class DataStore {\n  @observable visibleDate = new Date(\"2020-10-20\");\n  @observable date = new Date(\"2020-10-20\");\n  _dateTimeoutHandler?: any;\n\n  @observable dateCount = 0;\n  @observable startDate = new Date();\n\n  @observable.ref measuresForCountry: any = {};\n  @observable.ref casesForCountry: any[] = [];\n\n  @observable.ref geoJson: any;\n  @observable error?: string;\n\n  @observable resultForSelectedDate: CountrySummary = {};\n  @observable\n  selectedCountry?: string = \"Netherlands\";\n\n  constructor() {\n    this.parseGeoJson(europeGeoJson);\n    if (this.selectedCountry) {\n      this.selectCountry(this.selectedCountry);\n    }\n    this.calculateResultForDate();\n  }\n\n  @action selectCountry(country: string) {\n    this.selectedCountry = country;\n\n    // @ts-ignore\n    const d = distributionData[country];\n    if (!d) {\n      this.error = \"No distribution data\";\n      return;\n    }\n    // @ts-ignore\n    const m = measuresData[country];\n    if (!m) {\n      this.error = \"No countermeasure data\";\n      return;\n    }\n    this.error = undefined;\n\n    const measures: any = {};\n    m.forEach((d: any) => {\n      if (!measures.hasOwnProperty(d.date_start)) {\n        measures[d.date_start] = [];\n      }\n      measures[d.date_start].push(\"+\");\n      if (d.date_end !== \"NA\") {\n        if (!measures.hasOwnProperty(d.date_end)) {\n          measures[d.date_end] = [];\n        }\n        measures[d.date_end].push(\"-\");\n      }\n    });\n\n    this.measuresForCountry = measures;\n    this.casesForCountry = d;\n  }\n\n  @action changeDate(date: Date) {\n    // current date\n    this.visibleDate = date;\n    this.date = date;\n    this.calculateResultForDate();\n    // if (this._dateTimeoutHandler) {\n    //   clearTimeout(this._dateTimeoutHandler);\n    // }\n    // this._dateTimeoutHandler = setTimeout(() => {\n\n    //   this.date = date;\n    // }, 100);\n  }\n\n  // Should be done in etl\n  @action parseGeoJson(json: any) {\n    const countries = Object.keys(measuresData);\n    const output: any = { type: \"FeatureCollection\", features: [] };\n\n    json.features.forEach((f: any) => {\n      if (!countries.includes(f.properties.NAME)) {\n        return;\n      }\n      output.features.push(f);\n    });\n\n    this.geoJson = output;\n  }\n\n  @action calculateResultForDate() {\n    const output: CountrySummary = {};\n    const currentDateStr = this.date.toISOString().split(\"T\")[0];\n    map(distributionData, (val, key) => {\n      const targetDatum = val.find(\n        (v) => v.date === currentDateStr || v.date < currentDateStr // sorted by date desc, so get next in line if not found for current date\n      );\n      this.dateCount = val.length;\n      this.startDate = new Date(val[val.length - 1].date);\n\n      // @ts-ignore\n      const measures = measuresData[key].filter((m) => {\n        return m.date_start <= currentDateStr && m.date_end > currentDateStr;\n      });\n      output[key] = {\n        count: normalizeWeirdInput(targetDatum?.cum_14day_100k),\n        newCases: normalizeWeirdInput(targetDatum?.cases),\n        newDeaths: normalizeWeirdInput(targetDatum?.deaths),\n        population: normalizeWeirdInput(targetDatum?.popData2019),\n        measures,\n      };\n    });\n\n    this.resultForSelectedDate = output;\n  }\n}\n\nexport const store = new DataStore();\n","import React, { useMemo } from \"react\";\nimport {\n  LineChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Line,\n  Tooltip,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\nimport dayjs from \"dayjs\";\n\nimport { DataStore, store as dataStore } from \"../../store/Data\";\n\ninterface Props {\n  store: DataStore;\n}\n\ninterface Series {\n  name: string;\n  data: { x: string; y: number }[];\n}\n\ninterface ChartData {\n  options: any;\n  series: Series[];\n}\n\ninterface AnnotationProps {\n  x1: number;\n  x2: number;\n  y1: number;\n  y2: number;\n  stroke: any;\n  shape: any;\n  strokeWidth: number;\n  x: string;\n}\n\nexport const AnnotationShape: React.FC<any> = (props) => {\n  const { x } = props;\n\n  // Not clean to use singleton without context or props, but recharts sucks and is not extensible at all.\n  // Can't even use context here, or use a custom component which wraps ReferenceLine...\n  const measures = dataStore.measuresForCountry[x];\n\n  return (\n    <g>\n      <line {...props} className=\"recharts-reference-line-line\" />\n      {measures.map((m: string, i: number) => (\n        <text key={i} x={props.x1} y={20 + 15 * i}>\n          {m}\n        </text>\n      ))}\n    </g>\n  );\n};\n\n// const ReferenceLine: React.FC = (props) => {\n//   return <RLine x=\"2020-04-22\" shape={AnnotationShape} />;\n// };\n\nexport const Chart: React.FC<Props> = (props) => {\n  const { store } = props;\n\n  const data = useMemo(() => {\n    return store.casesForCountry\n      .slice()\n      .reverse()\n      .map((d) => {\n        return {\n          date: d.date,\n          cum_14day_100k: Math.round(d.cum_14day_100k || 0),\n        };\n      });\n  }, [store.casesForCountry]);\n\n  return (\n    <div style={{ width: \"100%\", height: 300 }}>\n      <ResponsiveContainer>\n        <LineChart data={data}>\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[0, 1000]} />\n          <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\" />\n          <Tooltip isAnimationActive={false} />\n          <ReferenceLine x={dayjs(store.date).format(\"YYYY-MM-DD\")} />\n          {/* {Object.keys(store.measuresForCountry).map((d) => (\n              <ReferenceLine key={d} x={d} shape={AnnotationShape} />\n            ))} */}\n          <Line\n            type=\"monotone\"\n            dot={false}\n            dataKey=\"cum_14day_100k\"\n            isAnimationActive={false}\n            stroke=\"#8884d8\"\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport styled from \"styled-components\";\nimport { sortBy } from \"lodash\";\n\nimport { DataStore } from \"../../store/Data\";\nimport { Chart } from \"../Chart\";\n\nconst StyledTable = styled.table`\n  table:first-of-type td:first-of-type {\n    width: 3rem;\n    text-align: right;\n  }\n`;\n\nconst Container = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst BottomText = styled.div`\n  margin-top: auto;\n  font-size: 0.8rem;\n  color: rgba(0, 0, 0, 0.5);\n  padding-bottom: 1rem;\n`;\n\ninterface DetailsProps {\n  store: DataStore;\n}\n\nexport const Details: React.FC<DetailsProps> = observer((props) => {\n  const { store } = props;\n\n  const country = store.selectedCountry;\n  if (!country) {\n    return <Container />;\n  }\n\n  const result = store.resultForSelectedDate[country];\n\n  return (\n    <Container>\n      <h2>{country}</h2>\n      <Chart store={store} />\n      {store.error && <p>{store.error}</p>}\n      {result && (\n        <div>\n          <StyledTable>\n            <tbody>\n              <tr>\n                <td>{result.count}</td>\n                <td>14-day cumulative number cases per 100k</td>\n              </tr>\n              <tr>\n                <td>{result.newCases}</td>\n                <td>new cases</td>\n              </tr>\n              <tr>\n                <td>{result.newDeaths}</td>\n                <td>new deaths</td>\n              </tr>\n            </tbody>\n          </StyledTable>\n          {false && (\n            <StyledTable>\n              <thead>\n                <tr>\n                  <td>measure</td>\n                  <td>from</td>\n                  <td>until</td>\n                </tr>\n              </thead>\n              <tbody>\n                {sortBy(result.measures, \"date_start\").map((measure) => (\n                  <tr key={measure.Response_measure}>\n                    {/* <td>{translateMeasure(measure.Response_measure)}</td> */}\n                    <td>{measure.Response_measure}</td>\n                    <td>{measure.date_start}</td>\n                    <td>{measure.date_end}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </StyledTable>\n          )}\n        </div>\n      )}\n      <BottomText>\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://www.ecdc.europa.eu/en/publications-data/download-todays-data-geographic-distribution-covid-19-cases-worldwide\"\n        >\n          https://www.ecdc.europa.eu/en/publications-data/download-todays-data-geographic-distribution-covid-19-cases-worldwide\n        </a>\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://www.ecdc.europa.eu/en/publications-data/download-data-response-measures-covid-19\"\n        >\n          https://www.ecdc.europa.eu/en/publications-data/download-data-response-measures-covid-19\n        </a>\n      </BottomText>\n    </Container>\n  );\n});\n","import React, { useCallback } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { store } from \"../../store/Data\";\nimport styled from \"styled-components\";\n\nconst Slider = styled.input`\n  width: 100%;\n`;\n\nconst Container = styled.div`\n  padding-left: 3rem;\n`;\n\ninterface TimelineProps {}\n\nexport const Timeline: React.FC<TimelineProps> = observer((props) => {\n  const handleChange = useCallback((e) => {\n    const addedDays = e.target.value;\n\n    const startDateUnix = store.startDate.getTime();\n    const result = new Date(startDateUnix + addedDays * 1000 * 60 * 60 * 24);\n    store.changeDate(result);\n  }, []);\n\n  const startDate = store.startDate;\n  const date = store.visibleDate;\n\n  const diffInDays =\n    (date.getTime() - startDate.getTime()) / 1000 / 60 / 60 / 24;\n\n  return (\n    <div>\n      <h2>Timeline</h2>\n      <Container>\n        <Slider\n          type=\"range\"\n          min={0}\n          max={store.dateCount}\n          value={diffInDays}\n          onChange={handleChange}\n        />\n        <p>{store.visibleDate.toLocaleDateString()}</p>\n      </Container>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport styled from \"styled-components\";\n\nimport { Map } from \"../components/Map\";\nimport \"leaflet/dist/leaflet.css\";\nimport { store } from \"../store/Data\";\nimport { Details } from \"../components/Details\";\nimport { Timeline } from \"../components/Timeline\";\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100%;\n  display: grid;\n  background: #f9f9f9;\n  padding: 1rem;\n  grid-template-columns: 1fr 37%;\n  grid-template-areas: \"_ details\";\n  grid-gap: 1rem;\n\n  @media (max-width: 800px) {\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr 60%;\n    grid-template-areas: \"_\" \"details\";\n\n    max-width: 800px;\n  }\n`;\n\ninterface TileProps {\n  area: string;\n}\nconst Tile = styled.div<TileProps>`\n  background: white;\n  border-radius: 16px;\n  box-shadow: 0 -1px 1px 0 #e5e5e5, 0 1px 1px 0 #e5e5e5, 0 2px 2px 0 #e5e5e5,\n    0 4px 4px 0 #e5e5e5;\n\n  grid-area: ${(props) => props.area};\n  z-index: 1;\n  padding: 0 1rem;\n  display: flex;\n  flex-direction: column;\n  overflow-y: scroll;\n`;\n\nconst Background = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  z-index: 0;\n\n  > * {\n    flex: 1;\n  }\n`;\n\nexport const Home: React.FC = observer(() => {\n  return (\n    <Container>\n      <Background>\n        <Map\n          store={store}\n          onSelect={(country: string) => store.selectCountry(country)}\n        />\n      </Background>\n      <Tile area=\"details\">\n        <Timeline />\n        <Details store={store} />\n      </Tile>\n    </Container>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { Home } from \"../screens/Home\";\n\nexport const App: React.FC = observer(() => {\n  return (\n    <Router basename=\"/corona-map\">\n      <Switch>\n        <Route path=\"/\" exact>\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}